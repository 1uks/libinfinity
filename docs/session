This is a short overview about how the session management works:

A session basically manages real-time collaborative editing of some document.
It is represented in various layers in infinote. The base type is InfSession
from libinfinity. It supports the following features:

InfSession supports session synchronization and manages a user list. A
InfSession (eventually a derived type) is created with at least three
construction properties: A InfConnectionManager which is used to send
messages belonging to the session to a remote site, a InfBuffer that
represents the underlaying document and a boolean value which specifies
whether the session starts in synchronization mode.

If a session is in synchronization mode, which can only occur at construction,
it expects an initial document content and user list from the remote site.
After synchronization is done, it leaves synchronization mode and then is
a session as any other, but has already some predefined content.

Synchronization is done in both ways: From server to client if a client
subscribes to a session (see the terminology file for the difference behween
subscribe and join) and from client to server if a client wants to create
a note with predefined content on the server.

A call to inf_session_subscribe() subscribes a given connection to the
session. This means that on the other site, a session should have been created
in synchronization mode. The function calls the to_xml vfunc to convert the
whole session into an XML document that is sent to the client. InfSession
itself only cares about synchronizing the user list, derived types may add
whatever content they need to be synchronized additionally. To synchronize
the user list, the user_to_xml vfunc is called for each user. InfSession
does add the user ID and user name to the xml node in this function, but
it may be overridden by derived session types to add more user information
to the XML (for example, the text session may add the user color).

If a session is in synchronization mode and receives a XML node, it is passed
to the process_xml vfunc. This function should reconstruct the session from
the XML. Note that not the whole XML tree is processed at once, but node
by node. InfSession reconstructs the user information by looking for <user>
tags. Foreach such tag, it calls the get_xml_user_props vfunc. This
vfunc is supposed to create a hash table that maps property names to
property values. In InfSession, the id, name and status attribute are
converted respectively. Then, the check_user_props vfunc is called. This
function is supposed to verify the input. In InfSession, it makes sure
that both ID and user name are unique. InfdSession (which is used on the
server side) adds an additional check that forces the status of each user
to be unavailable. Finally, the new user object is created using the new_user
vfunc. Derived sessions (such as InfdTextSession) might create a different
user type here (such as InfdTextUser).

Actual user joins are handled in InfdSession since they only appear on the
server side. Here, a similar proceduce happens except that after having
called get_xml_user_props, it is checked whether the name matches
the one of an existing but unavailable user. In this case, the existing
one is reused. This way, users are able to rejoin with the same user
information if they left the session for a while. If it does not match,
a new ID for the user is chosen. Then, check_user_props is called to check
the other properties.

To send the user join to clients, the user_to_xml vfunc is used, but only
if a new user has been created. Otherwise, only a status-change for the
existing user is sent.

On the client side, InfcSession has a function that takes a GHashTable of
user properties to perform a user join. This time, the contents of the
hash table are just used as attributes for the XML message sent to the
server.

When it receives a user join from the server, it uses the
get_xml_user_props vfunc from InfSession because the semantics are exactly
the same on the client. Also, check_user_props is used to validate the
received data and then the user is created using user_new.
