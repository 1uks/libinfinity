This is a more-or-less incomplete list of more or less independant tasks that
would be nice to have done for the first stable release.

Performance (Some ideas to improve performance, profile to verify!):
  * Cache private ptr to not need to call g_type_instance_get_private all the
    time (this eats 10% of the overall time currently!)
  * Move state vector helper functions in algorithm to InfAdoptedStateVector,
    with a better O(n) implementation.
  * Cache request.vector[request.user] in every request, this seems to be
    used pretty often.
  * Optionally compile with
    - G_DISABLE_CAST_CHECKS
    - G_DISABLE_ASSERT
    - G_DISABLE_CHECKS
    defined.

Memory:
  * replay-01 leaks about 4 megabytes of memory

Others:

 * Unify InfIo interface (IO):
   - Rename InfIoFunc to InfIoWatchFunc
   - Split inf_io_watch into inf_io_add_watch, inf_io_update_watch and
     inf_io_remove_watch
 * Split InfXmppConnection (XMPP)
   - InfXmppConnection: XMPP core implementation
   - InfJabberConnection: Connection to jabber server, managing roster, presence, etc. Derives from InfXmppConnection, not used on server side
   - InfRawXmppConnection: InfXmlConnection implementation by sending raw messages to XMPP server (Derive from InfXmppConnection, make XMPP server create these connections (unsure: rather add a vfunc and subclass InfXmppServer?))
   - InfJabberUserConnection: Implements InfXmlConnection by sending stuff to a particular Jabber user (owns InfJabberConnection)
   - InfJabberDiscovery (owns InfJabberConnection)
 * Allow operations to alter themselves while transforming (Adopted)
   - Severall classes currently assume operations are immutable.
   - Perhaps this isn't even a good idea after all if we are implementing
     caching in InfAdoptedAlgorithm. We should rather think about making
     InfAdoptedRequest immutable.
 * Make InfTextChunk reference-counted, or implement copy-on-write semantics. It is currently copied way too often. (InfText)
 * Implement inf_text_chunk_insert_substring, and make use in InfTextDeleteOperation (InfText)
 * Add a set_caret paramater to insert_text and erase_text of InfTextBuffer and corresponding properties in the InfText operations, handle in InfTextSession.
 * InfTextEncoding boxed type
 * unconst "const GParameter* params" parameter to user_new vfunc because g_object_newv wants unconst
 * Create a pseudo XML connection implementation, re-enable INF_IS_XML_CONNECTION check in inf_net_object_received
 * Add accessor API in InfGtkBrowserModel, so InfGtkBrowserView does not need to call gtk_tree_model_get all the time (which unnecssarily dups/refs)
 * Add append() and clear() virtual methods to InfTextBuffer. These may not have to be implemented since a default implementation can be used if no special one is provided, but it could help to speed up special operations. Make use in infd_note_plugin_text.
 * Make InfcExploreRequest derive from InfcNodeRequest. This saves some code duplication in InfcBrowser.
 * connection-closed signal for connection manager, where other objects (esp. session, session proxy, directory, browser) can drop their references to that connection. InfGtkBrowserStore can merge connections.
 * Think about how to do method initialization
 * Change the storage interface to be asynchronous
 * Replace the various begin-foo signals in InfcBrowser by a begin-operation with iter and request as parameters, detailed on the operation type (add-node, remove-node, subscribe-session etc.). Similar with the infc_browser_iter_get_foo_request functions (replacy by a generic infc_browser_iter_get_pending_request function).
 * Support sending some special characters like bell ('\a') through XML. I had
   an approach of defining custom entities for those (see inf-xmpp-connection.c
   in inf_xmpp_connection_initiate()), though this didn't seem to work.

 * ERROR:(inf-discovery-avahi.c:1055):inf_discovery_avahi_constructor: assertion failed: (priv->client != NULL)
